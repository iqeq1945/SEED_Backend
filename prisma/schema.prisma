// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String    @unique
  password  String    @db.VarChar(200)
  createdAt DateTime @default(now())
  seed      Int       @default(0)
  admin     Boolean  @default(false)
  book      Book[]
  order     Order[]  
  comment   Comment[]
  @@map("users")
}

model Book {
  id          Int @id @default(autoincrement())
  title       String @db.VarChar(200)
  introduce   String @db.Text()
  category    String
  cycle       String
  author      User @relation(fields: [authorId], references: [id])
  authorId    Int
  comment     Comment[]
  item        Book_Item[]
  order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("books")
}

model Book_Item {
  id          Int @id @default(autoincrement())
  title       String @db.VarChar(200)
  content     String @db.Text()
  book        Book @relation(fields: [bookId], references: [id]) 
  bookId      Int
  comment Comment[]
  open   Boolean @default(false)
  order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("book_items")
}

model Order {
  id            Int @id @default(autoincrement())
  user          User @relation(fields: [userId],references: [id])
  userId        Int
  book          Book @relation(fields: [bookId],references: [id])
  bookId        Int
  bookItem      Book_Item @relation(fields: [bookItemId],references: [id])
  bookItemId    Int
  createdAt     DateTime @default(now())

  @@map("orders")
  @@unique([userId,bookItemId])
}

model Comment {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId],references: [id])
  userId    Int
  content   String @db.Text()
  book Book @relation(fields: [bookId],references: [id])
  bookId Int
  bookItem Book_Item @relation(fields: [bookItemId], references: [id])
  bookItemId  Int     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}